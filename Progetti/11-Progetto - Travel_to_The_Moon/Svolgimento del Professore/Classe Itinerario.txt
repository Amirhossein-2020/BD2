Specifica classe Itinerario


Operazioni

destinazioni(): Destinazione [0..*]
	pre: nessuna
	post:
		- Sia p:Destinazione t.c. (p, this):partenza_itin
		- Sia a:Destinazione t.c. (p, this):arrivo_itin
		- Sia T l'insieme delle istanze t:Tappa tali che (this,t):itin_tappa
		- Sia D l'insieme delle istanze d:Destinazione tali che (d,t):tappa_dest per un qualche t:T.

		result = {p,a} union D


Vincoli esterni

[V.Itinerario.arrivo_dopo_ultima_tappa]
	Per ogni i:Itinerario siano: 
		- T l'insieme delle istanze 't' di classe Tappa tali che (i,t):itin_tappa
		- x il valore dell'attributo 'istante' dell'unico link di associazione arrivo_itin in cui 'i' è coinvolto

 	Per ogni t:T, deve essere: t.ripartenza < x.



[V.Itinerario.prima_tappa_dopo_partenza]
	Per ogni i:Itinerario siano: 
		- T l'insieme delle istanze 't' di classe Tappa tali che (i,t):itin_tappa e t.arrivo.giorno = 1
		- x il valore dell'attributo 'istante' dell'unico link di associazione partenza_itin in cui 'i' è coinvolto

	Per ogni t:T, deve essere t.arrivo.orario > x.



[V.Itinerario.arrivo_dopo_partenza_se_senza_tappe]
	Per ogni i:Itinerario tale siano: 
		- T l'insieme delle istanze 't' di classe Tappa tali che (i,t):itin_tappa
		- x il valore dell'attributo 'istante' dell'unico link di associazione partenza_itin in cui 'i' è coinvolto
		- y il valore dell'attributo 'istante' dell'unico link di associazione arrivo_itin in cui 'i' è coinvolto

	se T = vuoto e y.giorno = 1, allora deve essere x < y.orario.

	Per ogni t:T, deve essere t.arrivo.orario > x.



